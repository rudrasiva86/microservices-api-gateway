spring.application.name=microservices-api-gateway


# to enable eureka client registry; this is equivalent to @EnableEurekaClient annotation but this is specific for gateway service
spring.cloud.gateway.discovery.locator.enabled=true
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

# to enable lowercase names of services registered in eureka
spring.cloud.gateway.discovery.locator.lower-case-service-id=true





# this can be done using java config also
spring.cloud.gateway.routes[0].id=product-service

# since the product service is running on a dynamic port, we cannot give actual uri like http://localhost:port
# instead use the service name from eureka
# to use lowercase names set spring.cloud.gateway.discovery.locator.lower-case-service-id to true
spring.cloud.gateway.routes[0].uri=lb://microservices-product-service

# this property defines when path has /api/product then route to product service
# predicates takes key value pair, here key = Path and value = /api/product
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/product




spring.cloud.loadbalancer.ribbon.enabled=false


spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8180/auth/realms/microservices-realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=microservices-api-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=647b7651-8858-461d-8b27-9e544bc6f8e9
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/microservices-api-gateway-client


spring.cloud.gateway.default-filters=TokenRelay
